import re

def parse_nmap_output(raw_output):
    findings = {
        "ip_or_url": None,
        "ports": [],
        "os": None
    }

    # Allow IPs or URLs (since Nmap can scan hostnames too)
    ip_match = re.search(r"Nmap scan report for (.+)", raw_output)
    if ip_match:
        findings["ip_or_url"] = ip_match.group(1).strip()
    else:
        findings["ip_or_url"] = "Not found"

    # Parse open ports, service, and version
    port_lines = re.findall(r"(\d+/tcp)\s+open\s+(\S+)\s+([^\n]*)", raw_output)
    if port_lines:
        for port, service, version in port_lines:
            findings["ports"].append({
                "port": port.strip(),
                "service": service.strip(),
                "version": version.strip() if version else "None"
            })
    else:
        findings["ports"] = "No open ports found"

    # Parse OS details if available
    os_match = re.search(r"OS details: (.+)", raw_output)
    findings["os"] = os_match.group(1).strip() if os_match else "Not found"

    return findings

def parse_whois_output(raw_output):
    fields = {
        "domain_name": "Not found",
        "registrar": "Not found",
        "creation_date": "Not found",
        "expiry_date": "Not found",
        "updated_date": "Not found",
        "name_servers": "Not found",
        "status": "Not found",
        "registrant_organization": "Not found",
        "registrant_country": "Not found",
        "registrar_abuse_contact_email": "Not found",
        "registrar_abuse_contact_phone": "Not found"
    }

    def search_field(field_name, alt_names=None):
        alt_names = alt_names or []
        patterns = [field_name] + alt_names
        for name in patterns:
            pattern = re.compile(rf"^{name}:\s*(.+)$", re.IGNORECASE | re.MULTILINE)
            matches = pattern.findall(raw_output)
            if matches:
                return matches
        return []

    # Check each field, but also note if redacted
    domain_names = search_field("Domain Name")
    fields["domain_name"] = domain_names[0].strip() if domain_names else "Not found"

    registrars = search_field("Registrar")
    fields["registrar"] = registrars[0].strip() if registrars else "Not found"

    creation_dates = search_field("Creation Date")
    fields["creation_date"] = creation_dates[0].strip() if creation_dates else "Not found"

    expiry_dates = search_field("Registry Expiry Date", ["Registrar Registration Expiration Date"])
    fields["expiry_date"] = expiry_dates[0].strip() if expiry_dates else "Not found"

    updated_dates = search_field("Updated Date")
    fields["updated_date"] = updated_dates[0].strip() if updated_dates else "Not found"

    registrant_orgs = search_field("Registrant Organization")
    if registrant_orgs:
        if "REDACTED" in registrant_orgs[0].upper():
            fields["registrant_organization"] = "Redacted for privacy"
        else:
            fields["registrant_organization"] = registrant_orgs[0].strip()

    registrant_countries = search_field("Registrant Country")
    if registrant_countries:
        if "REDACTED" in registrant_countries[0].upper():
            fields["registrant_country"] = "Redacted for privacy"
        else:
            fields["registrant_country"] = registrant_countries[0].strip()

    abuse_emails = search_field("Registrar Abuse Contact Email")
    fields["registrar_abuse_contact_email"] = abuse_emails[0].strip() if abuse_emails else "Not found"

    abuse_phones = search_field("Registrar Abuse Contact Phone")
    fields["registrar_abuse_contact_phone"] = abuse_phones[0].strip() if abuse_phones else "Not found"

    # Multiple name servers
    name_servers = search_field("Name Server")
    if name_servers:
        fields["name_servers"] = [ns.strip() for ns in name_servers]
    else:
        fields["name_servers"] = "Not found"

    # Domain status
    domain_statuses = search_field("Domain Status")
    if domain_statuses:
        fields["status"] = [status.strip() for status in domain_statuses]
    else:
        fields["status"] = "Not found"

    return fields

def parse_combined_fastscan_output(combined_output):
    # Split sections
    nmap_section = re.search(r"--- Nmap Scan ---\n(.+?)\n\n", combined_output, re.DOTALL)
    whois_section = re.search(r"--- Whois Info ---\n(.+)", combined_output, re.DOTALL)

    nmap_output = nmap_section.group(1).strip() if nmap_section else ""
    whois_output = whois_section.group(1).strip() if whois_section else ""

    return {
        "nmap": parse_nmap_output(nmap_output),
        "whois": parse_whois_output(whois_output)
    }
