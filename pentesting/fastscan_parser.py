import re

def parse_nmap_output(raw_output):
    findings = {
        "ip_or_url": None,
        "other_ips": [],
        "ports": [],
        "os": None
    }

    # IP/URL (IPv4, IPv6, domain names)
    ip_match = re.search(
        r"Nmap scan report for ((?:\d{1,3}\.){3}\d{1,3}|(?:[0-9a-fA-F]{0,4}:){2,7}[0-9a-fA-F]{0,4}|[\w\.-]+\.\w{2,})",
        raw_output
    )
    findings["ip_or_url"] = ip_match.group(1).strip() if ip_match else "Not found"

    # Other IPs
    other_ips = re.findall(r"Other addresses for .*?: (.+)", raw_output)
    if other_ips:
        findings["other_ips"] = other_ips[0].split()

    # Open ports (version optional)
    port_lines = re.findall(r"(\d+/tcp)\s+open\s+(\S+)(?:\s+([^\n]*))?", raw_output)
    if port_lines:
        for port, service, version in port_lines:
            findings["ports"].append({
                "port": port.strip(),
                "service": service.strip(),
                "version": version.strip() if version else "None"
            })
    else:
        findings["ports"] = "No open ports found"

    # OS details or guess
    os_match = re.search(r"OS details: (.+)", raw_output)
    if os_match:
        findings["os"] = os_match.group(1).strip()
    else:
        os_guess = re.search(r"Aggressive OS guesses: (.+)", raw_output)
        findings["os"] = os_guess.group(1).strip() if os_guess else "Not found"

    return findings


def parse_whois_output(raw_output):
    fields = {
        "domain_name": "Not found",
        "registrar": "Not found",
        "creation_date": "Not found",
        "expiry_date": "Not found",
        "updated_date": "Not found",
        "name_servers": "Not found",
        "status": "Not found",
        "registrant_organization": "Not found",
        "registrant_country": "Not found",
        "registrar_abuse_contact_email": "Not found",
        "registrar_abuse_contact_phone": "Not found"
    }

    def search_field(field_name, alt_names=None):
        alt_names = alt_names or []
        patterns = [field_name] + alt_names
        for name in patterns:
            pattern = re.compile(rf"^{name}:\s*(.+)$", re.IGNORECASE | re.MULTILINE)
            matches = pattern.findall(raw_output)
            if matches:
                return matches
        return []

    # Extract fields
    fields["domain_name"] = search_field("Domain Name")[0].strip() if search_field("Domain Name") else "Not found"
    fields["registrar"] = search_field("Registrar")[0].strip() if search_field("Registrar") else "Not found"
    fields["creation_date"] = search_field("Creation Date")[0].strip() if search_field("Creation Date") else "Not found"
    fields["expiry_date"] = search_field("Registry Expiry Date", ["Registrar Registration Expiration Date"])[0].strip() if search_field("Registry Expiry Date", ["Registrar Registration Expiration Date"]) else "Not found"
    fields["updated_date"] = search_field("Updated Date")[0].strip() if search_field("Updated Date") else "Not found"

    registrant_orgs = search_field("Registrant Organization")
    fields["registrant_organization"] = (
        "Redacted for privacy" if registrant_orgs and "REDACTED" in registrant_orgs[0].upper()
        else registrant_orgs[0].strip() if registrant_orgs else "Not found"
    )

    registrant_countries = search_field("Registrant Country")
    fields["registrant_country"] = (
        "Redacted for privacy" if registrant_countries and "REDACTED" in registrant_countries[0].upper()
        else registrant_countries[0].strip() if registrant_countries else "Not found"
    )

    fields["registrar_abuse_contact_email"] = search_field("Registrar Abuse Contact Email")[0].strip() if search_field("Registrar Abuse Contact Email") else "Not found"
    fields["registrar_abuse_contact_phone"] = search_field("Registrar Abuse Contact Phone")[0].strip() if search_field("Registrar Abuse Contact Phone") else "Not found"

    # Multiple name servers
    name_servers = search_field("Name Server")
    fields["name_servers"] = [ns.strip() for ns in name_servers] if name_servers else "Not found"

    # Domain status (may be multiple)
    domain_statuses = search_field("Domain Status")
    fields["status"] = [status.strip() for status in domain_statuses] if domain_statuses else "Not found"

    return fields


def parse_combined_fastscan_output(combined_output):
    nmap_section = re.search(r"--- Nmap Scan ---\n(.+?)\n\n", combined_output, re.DOTALL)
    whois_section = re.search(r"--- Whois Info ---\n(.+)", combined_output, re.DOTALL)

    nmap_output = nmap_section.group(1).strip() if nmap_section else ""
    whois_output = whois_section.group(1).strip() if whois_section else ""

    return {
        "nmap": parse_nmap_output(nmap_output),
        "whois": parse_whois_output(whois_output)
    }
