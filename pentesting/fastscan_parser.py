import re

def parse_nmap_output(raw_output):
    findings = {
        "ip": "Not found",
        "other_ips": [],
        "ports": [],
        "os": "Not found"
    }

    # IP (primary)
    ip_match = re.search(
        r"Nmap scan report for (.+?) \(", raw_output
    )
    if ip_match:
        findings["ip"] = ip_match.group(1).strip()

    other_ips = re.findall(r"Other addresses for .*?: (.+)", raw_output)
    if other_ips:
        findings["other_ips"] = other_ips[0].split()

    port_lines = re.findall(r"(\d+/tcp)\s+open\s+(\S+)(?:\s+([^\n]*))?", raw_output)
    for port, service, version in port_lines:
        findings["ports"].append({
            "port": port.strip(),
            "service": service.strip(),
            "version": version.strip() if version else "Unknown"
        })

    os_details = re.search(r"OS details: (.+)", raw_output)
    if os_details:
        findings["os"] = os_details.group(1).strip()
    else:
        os_guess = re.search(r"Aggressive OS guesses: (.+)", raw_output)
        if os_guess:
            findings["os"] = os_guess.group(1).strip()

    return findings


def parse_whois_output(raw_output):
    fields = {
        "domain_name": "Not found",
        "registrar": "Not found",
        "creation_date": "Not found",
        "expiry_date": "Not found",
        "updated_date": "Not found",
        "name_servers": [],
        "status": [],
        "registrant_organization": "Not found",
        "registrant_country": "Not found",
        "registrar_abuse_contact_email": "Not found",
        "registrar_abuse_contact_phone": "Not found",
        "dnssec": "Not found",
        "reseller": "Not found",
        "icann_url": "Not found",
        # Additional contact details
        "registrant_email": "Not found",
        "admin_email": "Not found",
        "tech_email": "Not found",
        "billing_email": "Not found",
        "registrant_phone": "Not found",
        "admin_phone": "Not found",
        "tech_phone": "Not found",
        "billing_phone": "Not found"
    }

    def search_field(field_name, alt_names=None, multi=False):
        alt_names = alt_names or []
        patterns = [field_name] + alt_names
        for name in patterns:
            pattern = re.compile(rf"^{name}:\s*(.+)$", re.IGNORECASE | re.MULTILINE)
            matches = pattern.findall(raw_output)
            if matches:
                return matches if multi else matches[0].strip()
        return [] if multi else "Not found"

    fields["domain_name"] = search_field("Domain Name")
    fields["registrar"] = search_field("Registrar")
    fields["creation_date"] = search_field("Creation Date")
    fields["expiry_date"] = search_field("Registry Expiry Date", ["Registrar Registration Expiration Date"])
    fields["updated_date"] = search_field("Updated Date")
    fields["registrar_abuse_contact_email"] = search_field("Registrar Abuse Contact Email")
    fields["registrar_abuse_contact_phone"] = search_field("Registrar Abuse Contact Phone")
    fields["dnssec"] = search_field("DNSSEC")
    fields["reseller"] = search_field("Reseller")
    fields["icann_url"] = search_field("URL of the ICANN Whois Inaccuracy Complaint Form")

    # Name servers
    name_servers = search_field("Name Server", multi=True)
    fields["name_servers"] = [ns.strip() for ns in name_servers] if name_servers else []

    # Status
    domain_statuses = search_field("Domain Status", multi=True)
    fields["status"] = [s.strip() for s in domain_statuses] if domain_statuses else []

    # Contacts
    fields["registrant_organization"] = search_field("Registrant Organization")
    fields["registrant_country"] = search_field("Registrant Country")
    fields["registrant_email"] = search_field("Registrant Email")
    fields["admin_email"] = search_field("Admin Email")
    fields["tech_email"] = search_field("Tech Email")
    fields["billing_email"] = search_field("Billing Email")
    fields["registrant_phone"] = search_field("Registrant Phone")
    fields["admin_phone"] = search_field("Admin Phone")
    fields["tech_phone"] = search_field("Tech Phone")
    fields["billing_phone"] = search_field("Billing Phone")

    # Handle redacted info
    for k, v in fields.items():
        if isinstance(v, str) and "REDACTED" in v.upper():
            fields[k] = "Redacted for privacy"

    return fields


def parse_combined_fastscan_output(combined_output):
    nmap_section = re.search(r"--- Nmap Scan ---\n(.+?)\n\n", combined_output, re.DOTALL)
    whois_section = re.search(r"--- Whois Info ---\n(.+)", combined_output, re.DOTALL)

    nmap_output = nmap_section.group(1).strip() if nmap_section else ""
    whois_output = whois_section.group(1).strip() if whois_section else ""

    return {
        "nmap": parse_nmap_output(nmap_output),
        "whois": parse_whois_output(whois_output)
    }
