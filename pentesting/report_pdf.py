from fpdf import FPDF
from io import BytesIO
import re

def detect_findings(scan_output):
    findings = []
    scan_output = scan_output.lower()

    patterns = {
        "Open Ports": r"(open\s+\d+/tcp|open\s+\d+/udp|port\s+\d+\s+open|open port|Ports?:?\s.*open)",
        "SQL Injection": r"(sql\s*injection|sqli|sql syntax|sql error|mysql_fetch|unclosed quotation)",
        "Login Issues": r"(login failed|incorrect password|unauthorized|authentication failed|invalid credentials)",
        "XSS or Scripting": r"(cross[\s\-]?site|xss|<script>|javascript:|document\.cookie)",
        "Server Errors": r"(5\d\d\s+error|internal server error|crash|segfault|service unavailable)",
        "Exposure": r"(leak|sensitive data|exposed|publicly accessible|information disclosure)",
        "Vulnerabilities": r"(vulnerable|cve-\d{4}-\d{4,7}|exploit|buffer overflow|remote code execution|rce)",
        "Configuration Issues": r"(default credentials|directory listing|misconfiguration|outdated|excessive permissions)",
        "Warnings": r"(warning|deprecated|ssl certificate|expired|self-signed certificate|insecure protocol)"
    }

    for label, regex in patterns.items():
        matches = re.findall(regex, scan_output)
        if matches:
            findings.append(f"{label}: {len(matches)} occurrence(s)")

    return findings


def generate_pdf_report(selected_scans):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)

    for scan in selected_scans:
        pdf.add_page()
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(200, 12, txt=f"Scan Report - {scan.timestamp.strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align='C')
        
        pdf.set_draw_color(0, 0, 0)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)

        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, f"Target: {scan.target}")
        pdf.multi_cell(0, 10, f"Tool Used: {scan.tool_used}")
        pdf.multi_cell(0, 10, f"Scan Options: {scan.scan_options or 'N/A'}")

        pdf.ln(3)
        pdf.set_draw_color(100, 100, 100)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)

        pdf.set_font("Arial", 'B', 13)
        pdf.cell(0, 10, "Scan Output:", ln=True)
        pdf.set_font("Courier", size=11)  # Monospace for output
        pdf.multi_cell(0, 8, scan.scan_output)

        pdf.ln(5)
        pdf.set_draw_color(150, 150, 150)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)

        findings = detect_findings(scan.scan_output)

        if findings:
            pdf.set_font("Arial", 'B', 13)
            pdf.cell(0, 10, "Detected Findings:", ln=True)
            pdf.set_font("Arial", size=11)
            for f in findings:
                pdf.multi_cell(0, 8, f"- {f}")
        else:
            pdf.set_font("Arial", 'I', 11)
            pdf.cell(0, 10, "No major findings detected.", ln=True)

        pdf.ln(5)
        pdf.set_draw_color(200, 200, 200)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())

    pdf_output = BytesIO()
    pdf_bytes = pdf.output(dest='S').encode('latin1')
    pdf_output.write(pdf_bytes)
    pdf_output.seek(0)
    return pdf_output
